# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart10
title: Build a calculator
content: >+
  # Create a Simple Calculator


  ## &#x20;Introduction


  A calculator is one of the most basic programs in any programming language. In
  this problem, we will build a simple calculator that can perform basic
  arithmetic operations: addition, subtraction, multiplication, and division.


  ## &#x20;Problem Statement


  Write a Python function that takes three inputs: two numbers and an operator
  (\`+\`, \`-\`, \`\*\`, \`/\`). The function should perform the corresponding
  arithmetic operation and return the result.


  ## &#x20;Explanation


  To solve this problem, follow these steps:


  1\. Define a function that takes two numbers and an operator as input.


  2\. Use conditional statements (\`if-elif-else\`) to check the operator.


  3\. Perform the corresponding arithmetic operation.


  4\. Return the result.


  5\. Handle the case where division by zero might occur.


  ## &#x20;Function Signature


  ```

  def calculator(a, b, operator):

  ```


  ## &#x20;Example Test Cases


  ## &#x20;Input:


  ```

  print(calculator(10, 5, '+'))


  print(calculator(15, 3, '-'))


  print(calculator(6, 4, '*'))


  print(calculator(8, 2, '/'))


  print(calculator(10, 0, '/'))  # Edge case: division by zero

  ```


  15


  12


  24


  4.0


  Error: Division by zero


  ## &#x20;Constraints


  1\. The function should support only the four basic arithmetic operations
  (\`+\`, \`-\`, \`\*\`, \`/\`).


  2\. If an invalid operator is provided, return an appropriate error message.


  3\. Handle division by zero properly.


  ## Hint


  * Use an \`if-elif-else\` structure to check the operator.

  * Consider using the \`try-except\` block to handle division by zero errors.


  ## &#x20;Challenges


  1\. Extend the calculator to support additional operations like exponentiation
  (\`\*\*\`) and modulus (\`%\`).


  2\. Modify the function to accept user input dynamically and run in a loop
  until the user chooses to exit.


  3\. Implement an interactive command-line calculator with input validation.




  This problem helps in understanding conditional statements, function handling,
  and basic error handling in Python.

showEditor: true
editors:
  - course1/unit1/lesson1/lessonpart10/test.py
