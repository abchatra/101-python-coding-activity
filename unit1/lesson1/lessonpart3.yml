# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: lessonpart3
title: Fibonacci Series
content: >+
  # &#x20;Print Fibonacci Series Up to 'n' Terms


  ## Introduction


  The Fibonacci series is a sequence of numbers where each number is the sum of
  the two preceding ones, usually starting with 0 and 1. This series has
  applications in mathematics, computer science, and nature. In this problem, we
  will write a Python program to generate the Fibonacci series up to \`n\`
  terms.


  ## Problem Statement


  Write a Python function that takes an integer \`n\` as input and prints the
  Fibonacci series up to \`n\` terms. The Fibonacci sequence is defined as
  follows:


  * F(0) = 0


  - F(1) = 1


  * F(n) = F(n-1) + F(n-2)\`, for \`n >= 2


  ## Explanation


  To solve this problem, follow these steps:


  1\. Define a function that takes an integer \`n\` as input.


  2\. Initialize the first two numbers of the series as \`0\` and \`1\`.


  3\. Use a loop to calculate and print the next terms of the series up to \`n\`
  terms.


  4\. Handle the case where \`n\` is \`0\` or \`1\` separately.


  ## Function Signature


  ```

  def fibonacci_series(n):

  ```


  &#x20;  &#x20;


  ## &#x20;Example Test Cases


  ### Input:


  ```

  fibonacci_series(5)


  fibonacci_series(8)


  fibonacci_series(1)


  fibonacci_series(10)

  ```


  ### &#x20;Output:


  0 1 1 2 3


  0 1 1 2 3 5 8 13


  0


  0 1 1 2 3 5 8 13 21 34


  ## Constraints


  1\. The input \`n\` should be a non-negative integer.


  2\. If \`n\` is \`0\`, the function should print nothing.


  3\. The function should use an efficient approach to generate the series.


  ## &#x20;Hint


  * Use a loop to generate the series iteratively.

  * You can also use recursion, but it may not be efficient for large values of
  \`n\`.

  * Consider using a list to store the values before printing them.


  ## &#x20;Challenges


  1\. Modify the function to return the Fibonacci series as a list instead of
  printing it.


  2\. Implement a recursive version of the function and compare its performance
  with the iterative version.


  3\. Extend the function to generate Fibonacci numbers efficiently for very
  large \`n\` using memorization or dynamic programming.




  This problem helps in understanding loops, recursion, and sequence generation
  in Python.

showEditor: true
editors:
  - course1/unit1/lesson1/lessonpart3/test.py
